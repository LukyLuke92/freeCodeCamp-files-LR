import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

# Import data from the csv, setting date as the index and parsing the date
df = pd.read_csv('fcc-forum-pageviews.csv',parse_dates=True,index_col='date')
# Remove the top and bottom 2.5% of the data
df = df[(df['value'] > df['value'].quantile(0.025)) & (df['value'] < df['value'].quantile(0.975))]

# Function that draws the line plot using matplotlib
def draw_line_plot():
    # Create a figure and draw the line plot, specifying line color and width
    fig, ax = plt.subplots(figsize=(16,6))
    plt.plot(df.index, df['value'],color='firebrick',linewidth=1.5)
    # Add the title and x- and y-labels
    plt.title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')
    # Save the image and return fig
    fig.savefig('line_plot.png')
    return fig

# Function that draws the bar graph using seaborn
def draw_bar_plot():
    # Copy and modify data for monthly bar plot
    # First, reset the index, so that you can use date as the key column
    # with Grouper, then set the frequency to monthly (by month start)
    df_bar = df.reset_index().groupby(pd.Grouper(key='date',freq='MS')).mean()
    df_bar = df_bar.reset_index()
    # Add the month (as a number - this is done so that when you make the pivot,
    # table, they are in the correct order) as a column
    df_bar['month'] = df_bar['date'].dt.month
    # Add the year as a column
    df_bar['year'] = df_bar['date'].dt.year
    # Drop the date column since you don't need it anymore
    df_bar = df_bar.drop(labels='date',axis=1)
    # Use pd.pivot_table to rearrange the data - this will make year the new
    # index, and make each month a separate column, with the mean of value
    # across year-month pairs as the new value
    # In general, pivot_table can be used to rearrange data where you have
    # repeated sets across columns and want to aggregate values that correspond
    # to those sets
    df_bar = pd.pivot_table(df_bar,values='value',index='year',columns='month')
    plot = df_bar.plot(kind='bar',xlabel='Years',ylabel='Average Page Views',
        legend=True,figsize=(6,6),position=0.6)
    # Add month names to the legend and add a legend title
    plt.legend(['January','February','March','April','May','June','July',
        'August','September','October','November','December'],title='Months')
    # plt.tight_layout() seems to just magically fix issues with elements being
    # cut off
    plt.tight_layout()
    # Use get_figure() to convert the plot generated by pd.dataframe.plot()
    # into a figure
    fig = plot.get_figure()
    # Save image and return fig (don't change this part)
    fig.savefig('bar_plot.png')
    return fig

def draw_box_plot():
    # Prepare data for box plots (this part is done!)
    df_box = df.copy()
    df_box.reset_index(inplace=True)
    # This is an alternative way of doing what I did in draw_bar_plot()
    # to create new columns with the month and year
    # It's using a list generator to extract the year from each date, then
    # using another generator to extract the month, formatted in the correct way
    df_box['year'] = [d.year for d in df_box.date]
    df_box['month'] = [d.strftime('%b') for d in df_box.date]
    print(df_box)
    # Draw box plots (using Seaborn)
    fig, axes = plt.subplots(nrows=1,ncols=2,figsize=(25,10))
    sns.boxplot(data=df_box,x='year',y='value',hue='year',palette='bright',ax=axes[0],legend=False)
    sns.boxplot(data=df_box,x='month',y='value',hue='month',palette='bright',ax=axes[1],
        order=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
    axes[0].set(xlabel='Year',ylabel='Page Views',title='Year-wise Box Plot (Trend)')
    axes[1].set(xlabel='Month',ylabel='Page Views',title='Month-wise Box Plot (Seasonality)')


    # Save image and return fig (don't change this part)
    fig.savefig('box_plot.png')
    return fig
